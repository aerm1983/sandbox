#!/bin/bash

# KUBECTL ZERO-HELPER
# dependencies: git-bash-aliases.sh


# 2024-09-02: Pending: define ${SERVICES_FULL} or equivalent, rewrite bash sentences, using following strategy:
#
# ### define services list, loop through it
# __SERVICES_FULL__="api bulk product order ktype mapping mailing template ui" ;
# for svc in ${__SERVICES_FULL__} ; do echo ${svc} ; done ;
#
# ### define services exclusions and filtered list
# __SERVICES_FILTERED__=$( echo ${__SERVICES_FULL__} | sed 's/(ktype|template)//ig' ) ;
# echo ${__SERVICES_FILTERED__} ;
#
# ### match value from service list
# for svc in ${__SERVICES_FILTERED__} ; do echo ${svc} ; if [ ${svc} = 'bulk' ] ; then echo 'matched: '${svc} ; break ; fi ; done ;


__KH_UPDATED__='2024-12-27 18:23'


# initate required vars
if [ -z ${__kubeconfig_regex} ] ; then
    __kubeconfig_regex='wm-pre'
fi
__KH_CLEANVARS__='CLEANVARS'
__KH_LOG_HISTORY_DIR__=${HOME}'/Desktop/loghistory'


# regex definitions, kubeconfig selection
__KH_REGEX_WM_PRE__='wm0-pre'
__KH_REGEX_WM1_PRO_GOODBUY__='wm1-pro-goodbuy'
__KH_REGEX_WM2_PRO_GROUPELGA__='wm2-pro-groupelga'
__KH_REGEX_WM4_PRO_HOEPLI__='wm4-pro-hoepli'
__KH_REGEX_WM5_PRO_LOGISFASHION_MX__='wm5-pro-logisfashion-mx'
__KH_REGEX_WM7_PRO_BEB__='wm7-pro-beb'
__KH_REGEX_WM8_PRO_VEEPEE__='wm8-pro-veepee'


# regex definitions, pod/service selection
__KH_REGEX_API__='apiproc'             # 00
__KH_REGEX_BULK__='bulk'               # 01
__KH_REGEX_PRODUCT__='productm'        # 02
__KH_REGEX_ORDER__='orderm'            # 03
__KH_REGEX_KTYPE__='ktype'             # 04
__KH_REGEX_MAPPING__='mappingm'        # 05
__KH_REGEX_MAILING__='mailing'         # 06
__KH_REGEX_TEMPLATE__='template-gen'   # 07
__KH_REGEX_UI__='ui'                   # 08
__KH_REGEX_RUNAME__='runame'           # 09
__KH_REGEX_USER__='userm'              # 10
__KH_REGEX_EBAY__='eebay'              # 15
__KH_REGEX_MIRAVIA__='miravia'         # 16
__KH_REGEX_AMAZON__='amazon'           # 17
__KH_REGEX_CARRIERCORREOSEXPRESS__='correosexpress' # 25
__KH_REGEX_PIM__='pim'                 # 30
__KH_REGEX_ICECAT__='icecat'           # 31
__KH_REGEX_AECOC__='aecoc'             # 32
__KH_REGEX_RABBITMQ__='headless.*15672'     # 100
# __regex=${1}                              # 98
__KH_REGEX_CLEANVARS__=${__KH_CLEANVARS__}  # 99


# refresh source ports for port-forward
__KH_SOURCE_PORT_API__=10000
__KH_SOURCE_PORT_BULK__=10001
__KH_SOURCE_PORT_PRODUCT__=10002
__KH_SOURCE_PORT_ORDER__=10003
__KH_SOURCE_PORT_KTYPE__=10004
__KH_SOURCE_PORT_MAPPING__=10005
__KH_SOURCE_PORT_MAILING__=10006
__KH_SOURCE_PORT_TEMPLATE__=10007
__KH_SOURCE_PORT_UI__=10008
__KH_SOURCE_PORT_RUNAME__=10009
__KH_SOURCE_PORT_USER__=10010
__KH_SOURCE_PORT_EBAY__=10015
__KH_SOURCE_PORT_MIRAVIA__=10016
__KH_SOURCE_PORT_AMAZON__=10017
__KH_SOURCE_PORT_CARRIERCORREOSEXPRESS__=10025
__KH_SOURCE_PORT_PIM__=10030
__KH_SOURCE_PORT_ICECAT__=10031
__KH_SOURCE_PORT_AECOC__=10032
__KH_SOURCE_PORT_RABBITMQ__=10056




# = = = = = = = = =
# MAIN FUNCTIONS
# = = = = = = = = =




function __kh_load {

    # init
    echo '--> kubectl refresh: kubeconfig, $kk, deployments, pods, services'
    command cd ${__KH_KUBE_HOME__}

    # if ${1} empty, refresh with same previous kubeconfig
    if [ -z ${1} ] ; then
        set ${__kubeconfig_regex}
        echo 'param ${1} was empty, now populated -- ${__kubeconfig_regex}: '${__kubeconfig_regex}' ; ${1}: '${1}
    fi

    # check if kubeconfig changed
    __kh_kubeconfig_changed='true'
    if [ ${__kubeconfig_regex} = ${1} ] ; then
        __kh_kubeconfig_changed='false'
    fi

    # clean tmp dir
    if [ ${__kh_kubeconfig_changed} = 'true' ] ; then
        command rm -vfR ./tmp/*
    fi

    # define __kh_kubeconfig
    __kubeconfig_regex=${1}
    kubeconfig_list="$( command ls *.yml )"
    __kh_kubeconfig=$( echo "${kubeconfig_list}" | command grep -P -i ${__kubeconfig_regex} | command awk '{print $1}' )
    echo '__kh_kubeconfig: '${__kh_kubeconfig}

    # define __kh_namespace
    if [ -z ${__kh_namespace} ] ; then
        __kh_namespace='default'
    fi
    echo '__kh_namespace: '${__kh_namespace}

    # define kk
    kk='command kubectl --kubeconfig '${__kh_kubeconfig}' --namespace '${__kh_namespace}
    echo 'kk: '${kk}

    # refresh services
    echo -n 'executing '\'${kk}' get services'\'' ... '
    ${kk} get services &> ./tmp/get-services.txt
    service_list="$( cat ./tmp/get-services.txt )"
    __kh_service_api=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_API__} | command awk '{print $1}' )
    __kh_service_bulk=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_BULK__} | command awk '{print $1}' )
    __kh_service_product=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_PRODUCT__} | command awk '{print $1}' )
    __kh_service_order=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_ORDER__} | command awk '{print $1}' )
    __kh_service_ktype=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_KTYPE__} | command awk '{print $1}' )
    __kh_service_mapping=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_MAPPING__} | command awk '{print $1}' )
    __kh_service_mailing=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_MAILING__} | command awk '{print $1}' )
    __kh_service_template=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_TEMPLATE__} | command awk '{print $1}' )
    __kh_service_ui=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_UI__} | command awk '{print $1}' )
    __kh_service_runame=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_RUNAME__} | command awk '{print $1}' )
    __kh_service_user=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_USER__} | command awk '{print $1}' )
    __kh_service_ebay=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_EBAY__} | command awk '{print $1}' )
    __kh_service_miravia=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_MIRAVIA__} | command awk '{print $1}' )
    __kh_service_amazon=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_AMAZON__} | command awk '{print $1}' )
    __kh_service_carriercorreosexpress=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_CARRIERCORREOSEXPRESS__} | command awk '{print $1}' )
    __kh_service_pim=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_PIM__} | command awk '{print $1}' )
    __kh_service_icecat=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_ICECAT__} | command awk '{print $1}' )
    __kh_service_aecoc=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_AECOC__} | command awk '{print $1}' )
    __kh_service_rabbitmq=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_RABBITMQ__} | command awk '{print $1}' )
    echo 'done'

    # refresh deployments
    echo -n 'executing '\'${kk}' get deployments'\'' ... '
    ${kk} get deployments > ./tmp/get-deployments.txt
    deployment_list="$( cat ./tmp/get-deployments.txt )"
    __kh_deployment_api=$( echo "${deployment_list}" | command grep -P -i ${__KH_REGEX_API__} | command awk '{print $1}' )
    __kh_deployment_bulk=$( echo "${deployment_list}" | command grep -P -i ${__KH_REGEX_BULK__} | command awk '{print $1}' )
    __kh_deployment_product=$( echo "${deployment_list}" | command grep -P -i ${__KH_REGEX_PRODUCT__} | command awk '{print $1}' )
    __kh_deployment_order=$( echo "${deployment_list}" | command grep -P -i ${__KH_REGEX_ORDER__} | command awk '{print $1}' )
    __kh_deployment_ktype=$( echo "${deployment_list}" | command grep -P -i ${__KH_REGEX_KTYPE__} | command awk '{print $1}' )
    __kh_deployment_mapping=$( echo "${deployment_list}" | command grep -P -i ${__KH_REGEX_MAPPING__} | command awk '{print $1}' )
    __kh_deployment_mailing=$( echo "${deployment_list}" | command grep -P -i ${__KH_REGEX_MAILING__} | command awk '{print $1}' )
    __kh_deployment_template=$( echo "${deployment_list}" | command grep -P -i ${__KH_REGEX_TEMPLATE__} | command awk '{print $1}' )
    __kh_deployment_ui=$( echo "${deployment_list}" | command grep -P -i ${__KH_REGEX_UI__} | command awk '{print $1}' )
    __kh_deployment_runame=$( echo "${deployment_list}" | command grep -P -i ${__KH_REGEX_RUNAME__} | command awk '{print $1}' )
    __kh_deployment_user=$( echo "${deployment_list}" | command grep -P -i ${__KH_REGEX_USER__} | command awk '{print $1}' )
    __kh_deployment_ebay=$( echo "${deployment_list}" | command grep -P -i ${__KH_REGEX_EBAY__} | command awk '{print $1}' )
    __kh_deployment_miravia=$( echo "${deployment_list}" | command grep -P -i ${__KH_REGEX_MIRAVIA__} | command awk '{print $1}' )
    __kh_deployment_amazon=$( echo "${deployment_list}" | command grep -P -i ${__KH_REGEX_AMAZON__} | command awk '{print $1}' )
    __kh_deployment_carriercorreosexpress=$( echo "${deployment_list}" | command grep -P -i ${__KH_REGEX_CARRIERCORREOSEXPRESS__} | command awk '{print $1}' )
    __kh_deployment_pim=$( echo "${deployment_list}" | command grep -P -i ${__KH_REGEX_PIM__} | command awk '{print $1}' )
    __kh_deployment_icecat=$( echo "${deployment_list}" | command grep -P -i ${__KH_REGEX_ICECAT__} | command awk '{print $1}' )
    __kh_deployment_aecoc=$( echo "${deployment_list}" | command grep -P -i ${__KH_REGEX_AECOC__} | command awk '{print $1}' )
    echo 'done'

    # refresh pods
    echo -n 'executing '\'${kk}' get pods'\'' ... '
    ${kk} get pods > ./tmp/get-pods.txt
    pod_list="$( cat ./tmp/get-pods.txt )"
    __kh_pod_api=$( echo "${pod_list}" | command grep -P -i ${__KH_REGEX_API__} | command awk '{print $1}' )
    __kh_pod_bulk=$( echo "${pod_list}" | command grep -P -i ${__KH_REGEX_BULK__} | command awk '{print $1}' )
    __kh_pod_product=$( echo "${pod_list}" | command grep -P -i ${__KH_REGEX_PRODUCT__} | command awk '{print $1}' )
    __kh_pod_order=$( echo "${pod_list}" | command grep -P -i ${__KH_REGEX_ORDER__} | command awk '{print $1}' )
    __kh_pod_ktype=$( echo "${pod_list}" | command grep -P -i ${__KH_REGEX_KTYPE__} | command awk '{print $1}' )
    __kh_pod_mapping=$( echo "${pod_list}" | command grep -P -i ${__KH_REGEX_MAPPING__} | command awk '{print $1}' )
    __kh_pod_mailing=$( echo "${pod_list}" | command grep -P -i ${__KH_REGEX_MAILING__} | command awk '{print $1}' )
    __kh_pod_template=$( echo "${pod_list}" | command grep -P -i ${__KH_REGEX_TEMPLATE__} | command awk '{print $1}' )
    __kh_pod_ui=$( echo "${pod_list}" | command grep -P -i ${__KH_REGEX_UI__} | command awk '{print $1}' )
    __kh_pod_runame=$( echo "${pod_list}" | command grep -P -i ${__KH_REGEX_RUNAME__} | command awk '{print $1}' )
    __kh_pod_user=$( echo "${pod_list}" | command grep -P -i ${__KH_REGEX_USER__} | command awk '{print $1}' )
    __kh_pod_ebay=$( echo "${pod_list}" | command grep -P -i ${__KH_REGEX_EBAY__} | command awk '{print $1}' )
    __kh_pod_miravia=$( echo "${pod_list}" | command grep -P -i ${__KH_REGEX_MIRAVIA__} | command awk '{print $1}' )
    __kh_pod_amazon=$( echo "${pod_list}" | command grep -P -i ${__KH_REGEX_AMAZON__} | command awk '{print $1}' )
    __kh_pod_carriercorreosexpress=$( echo "${pod_list}" | command grep -P -i ${__KH_REGEX_CARRIERCORREOSEXPRESS__} | command awk '{print $1}' )
    __kh_pod_pim=$( echo "${pod_list}" | command grep -P -i ${__KH_REGEX_PIM__} | command awk '{print $1}' )
    __kh_pod_icecat=$( echo "${pod_list}" | command grep -P -i ${__KH_REGEX_ICECAT__} | command awk '{print $1}' )
    __kh_pod_aecoc=$( echo "${pod_list}" | command grep -P -i ${__KH_REGEX_AECOC__} | command awk '{print $1}' )
    echo 'done'

    # refresh containers
    __kh_container=${__kh_deployment}
    __kh_container_api=${__kh_deployment_api}
    __kh_container_bulk=${__kh_deployment_bulk}
    __kh_container_product=${__kh_deployment_product}
    __kh_container_order=${__kh_deployment_order}
    __kh_container_ktype=${__kh_deployment_ktype}
    __kh_container_mapping=${__kh_deployment_mapping}
    __kh_container_mailing=${__kh_deployment_mailing}
    __kh_container_template=${__kh_deployment_template}
    __kh_container_ui=${__kh_deployment_ui}
    __kh_container_runame=${__kh_deployment_runame}
    __kh_container_user=${__kh_deployment_user}
    __kh_container_ebay=${__kh_deployment_ebay}
    __kh_container_miravia=${__kh_deployment_miravia}
    __kh_container_amazon=${__kh_deployment_amazon}
    __kh_container_carriercorreosexpress=${__kh_deployment_carriercorreosexpress}
    __kh_container_pim=${__kh_deployment_pim}
    __kh_container_icecat=${__kh_deployment_icecat}
    __kh_container_aecoc=${__kh_deployment_aecoc}
    __kh_container_rabbitmq=${__kh_deployment_rabbitmq}
    # echo 'refresh containers, done'

    # refresh target ports for port-forward
    __kh_target_port_api=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_API__} | command awk '{print $5}' | sed '{ s/\/TCP$//ig }' )
    __kh_target_port_bulk=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_BULK__} | command awk '{print $5}' | sed '{ s/\/TCP$//ig }' )
    __kh_target_port_product=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_PRODUCT__} | command awk '{print $5}' | sed '{ s/\/TCP$//ig }' )
    __kh_target_port_order=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_ORDER__} | command awk '{print $5}' | sed '{ s/\/TCP$//ig }' )
    __kh_target_port_ktype=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_KTYPE__} | command awk '{print $5}' | sed '{ s/\/TCP$//ig }' )
    __kh_target_port_mapping=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_MAPPING__} | command awk '{print $5}' | sed '{ s/\/TCP$//ig }' )
    __kh_target_port_mailing=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_MAILING__} | command awk '{print $5}' | sed '{ s/\/TCP$//ig }' )
    __kh_target_port_template=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_TEMPLATE__} | command awk '{print $5}' | sed '{ s/\/TCP$//ig }' )
    __kh_target_port_ui=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_UI__} | command awk '{print $5}' | sed '{ s/\/TCP$//ig }' )
    __kh_target_port_runame=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_RUNAME__} | command awk '{print $5}' | sed '{ s/\/TCP$//ig }' )
    __kh_target_port_user=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_USER__} | command awk '{print $5}' | sed '{ s/\/TCP$//ig }' )
    __kh_target_port_ebay=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_EBAY__} | command awk '{print $5}' | sed '{ s/\/TCP$//ig }' )
    __kh_target_port_miravia=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_MIRAVIA__} | command awk '{print $5}' | sed '{ s/\/TCP$//ig }' )
    __kh_target_port_amazon=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_AMAZON__} | command awk '{print $5}' | sed '{ s/\/TCP$//ig }' )
    __kh_target_port_carriercorreosexpress=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_CARRIERCORREOSEXPRESS__} | command awk '{print $5}' | sed '{ s/\/TCP$//ig }' )
    # __kh_target_port_rabbitmq=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_RABBITMQ__} | command awk '{print $5}' | sed '{ s/\/TCP$//ig }' ) # manual adjust
    __kh_target_port_rabbitmq=15672 # manual adjust
    __kh_target_port_pim=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_PIM__} | command awk '{print $5}' | sed '{ s/\/TCP$//ig }' )
    __kh_target_port_icecat=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_ICECAT__} | command awk '{print $5}' | sed '{ s/\/TCP$//ig }' )
    __kh_target_port_aecoc=$( echo "${service_list}" | command grep -P -i ${__KH_REGEX_AECOC__} | command awk '{print $5}' | sed '{ s/\/TCP$//ig }' )

    # last update
    # __kh_env_file_updated=$( date --iso-8601=seconds ) # dificult for fast human reading (no white-space)
    __kh_env_file_updated=$( date +'%Y-%m-%d %H:%M:%S %Z' )

    # write environment file
    __kh_env_file=${__KH_KUBE_HOME__}'/tmp/__kh_env.sh.txt'
    s='#! /bin/bash \n'
    s=${s}'\n'
    s=${s}'# KUBECONFIG FILE \n'
    s=${s}'__kh_env_file_updated='\'${__kh_env_file_updated}\''\n' 
    s=${s}'__kh_kubeconfig='\'${__kh_kubeconfig}\''\n'
    s=${s}'__kh_namespace='\'${__kh_namespace}\''\n'
    s=${s}'kk='\'${kk}\'' \n'
    s=${s}'\n'
    s=${s}'# SERVICES \n'
    s=${s}'__kh_service_api='${__kh_service_api}' \n'
    s=${s}'__kh_service_bulk='${__kh_service_bulk}' \n'
    s=${s}'__kh_service_product='${__kh_service_product}' \n'
    s=${s}'__kh_service_order='${__kh_service_order}' \n'
    s=${s}'__kh_service_ktype='${__kh_service_ktype}' \n'
    s=${s}'__kh_service_mapping='${__kh_service_mapping}' \n'
    s=${s}'__kh_service_mailing='${__kh_service_mailing}' \n'
    s=${s}'__kh_service_template='${__kh_service_template}' \n'
    s=${s}'__kh_service_ui='${__kh_service_ui}' \n'
    s=${s}'__kh_service_runame='${__kh_service_runame}' \n'
    s=${s}'__kh_service_user='${__kh_service_user}' \n'
    s=${s}'__kh_service_ebay='${__kh_service_ebay}' \n'
    s=${s}'__kh_service_miravia='${__kh_service_miravia}' \n'
    s=${s}'__kh_service_amazon='${__kh_service_amazon}' \n'
    s=${s}'__kh_service_carriercorreosexpress='${__kh_service_carriercorreosexpress}' \n'
    s=${s}'__kh_service_pim='${__kh_service_pim}' \n'
    s=${s}'__kh_service_icecat='${__kh_service_icecat}' \n'
    s=${s}'__kh_service_aecoc='${__kh_service_aecoc}' \n'
    s=${s}'__kh_service_rabbitmq='${__kh_service_rabbitmq}' \n'
    s=${s}'\n'
    s=${s}'# DEPLOYMENTS \n'
    s=${s}'__kh_deployment_api='${__kh_deployment_api}' \n'
    s=${s}'__kh_deployment_bulk='${__kh_deployment_bulk}' \n'
    s=${s}'__kh_deployment_product='${__kh_deployment_product}' \n'
    s=${s}'__kh_deployment_order='${__kh_deployment_order}' \n'
    s=${s}'__kh_deployment_ktype='${__kh_deployment_ktype}' \n'
    s=${s}'__kh_deployment_mapping='${__kh_deployment_mapping}' \n'
    s=${s}'__kh_deployment_mailing='${__kh_deployment_mailing}' \n'
    s=${s}'__kh_deployment_template='${__kh_deployment_template}' \n'
    s=${s}'__kh_deployment_ui='${__kh_deployment_ui}' \n'
    s=${s}'__kh_deployment_runame='${__kh_deployment_runame}' \n'
    s=${s}'__kh_deployment_user='${__kh_deployment_user}' \n'
    s=${s}'__kh_deployment_ebay='${__kh_deployment_ebay}' \n'
    s=${s}'__kh_deployment_miravia='${__kh_deployment_miravia}' \n'
    s=${s}'__kh_deployment_amazon='${__kh_deployment_amazon}' \n'
    s=${s}'__kh_deployment_carriercorreosexpress='${__kh_deployment_carriercorreosexpress}' \n'
    s=${s}'__kh_deployment_rabbitmq='${__kh_deployment_carriercorreosexpress}' \n'
    s=${s}'__kh_deployment_pim='${__kh_deployment_pim}' \n'
    s=${s}'__kh_deployment_icecat='${__kh_deployment_icecat}' \n'
    s=${s}'__kh_deployment_aecoc='${__kh_deployment_aecoc}' \n'
    s=${s}'\n'
    s=${s}'# PODS \n'
    s=${s}'__kh_pod_api='${__kh_pod_api}' \n'
    s=${s}'__kh_pod_bulk='${__kh_pod_bulk}' \n'
    s=${s}'__kh_pod_product='${__kh_pod_product}' \n'
    s=${s}'__kh_pod_order='${__kh_pod_order}' \n'
    s=${s}'__kh_pod_ktype='${__kh_pod_ktype}' \n'
    s=${s}'__kh_pod_mapping='${__kh_pod_mapping}' \n'
    s=${s}'__kh_pod_mailing='${__kh_pod_mailing}' \n'
    s=${s}'__kh_pod_template='${__kh_pod_template}' \n'
    s=${s}'__kh_pod_ui='${__kh_pod_ui}' \n'
    s=${s}'__kh_pod_runame='${__kh_pod_runame}' \n'
    s=${s}'__kh_pod_user='${__kh_pod_user}' \n'
    s=${s}'__kh_pod_ebay='${__kh_pod_ebay}' \n'
    s=${s}'__kh_pod_miravia='${__kh_pod_miravia}' \n'
    s=${s}'__kh_pod_amazon='${__kh_pod_amazon}' \n'
    s=${s}'__kh_pod_carriercorreosexpress='${__kh_pod_carriercorreosexpress}' \n'
    s=${s}'__kh_pod_pim='${__kh_pod_pim}' \n'
    s=${s}'__kh_pod_icecat='${__kh_pod_icecat}' \n'
    s=${s}'__kh_pod_aecoc='${__kh_pod_aecoc}' \n'
    s=${s}'__kh_pod_rabbitmq='${__kh_pod_rabbitmq}' \n'
    s=${s}'\n'
    s=${s}'# CONTAINERS \n'
    s=${s}'__kh_container_api='${__kh_container_api}' \n'
    s=${s}'__kh_container_bulk='${__kh_container_bulk}' \n'
    s=${s}'__kh_container_product='${__kh_container_product}' \n'
    s=${s}'__kh_container_order='${__kh_container_order}' \n'
    s=${s}'__kh_container_ktype='${__kh_container_ktype}' \n'
    s=${s}'__kh_container_mapping='${__kh_container_mapping}' \n'
    s=${s}'__kh_container_mailing='${__kh_container_mailing}' \n'
    s=${s}'__kh_container_template='${__kh_container_template}' \n'
    s=${s}'__kh_container_ui='${__kh_container_ui}' \n'
    s=${s}'__kh_container_runame='${__kh_container_runame}' \n'
    s=${s}'__kh_container_user='${__kh_container_user}' \n'
    s=${s}'__kh_container_ebay='${__kh_container_ebay}' \n'
    s=${s}'__kh_container_miravia='${__kh_container_miravia}' \n'
    s=${s}'__kh_container_amazon='${__kh_container_amazon}' \n'
    s=${s}'__kh_container_carriercorreosexpress='${__kh_container_carriercorreosexpress}' \n'
    s=${s}'__kh_container_pim='${__kh_container_pim}' \n'
    s=${s}'__kh_container_icecat='${__kh_container_icecat}' \n'
    s=${s}'__kh_container_aecoc='${__kh_container_aecoc}' \n'
    s=${s}'__kh_container_rabbitmq='${__kh_container_rabbitmq}' \n'
    s=${s}'\n'
    s=${s}'# PORT FORWARD, SOURCE PORTS \n'
    s=${s}'__KH_SOURCE_PORT_API__='${__KH_SOURCE_PORT_API__}' \n'
    s=${s}'__KH_SOURCE_PORT_BULK__='${__KH_SOURCE_PORT_BULK__}' \n'
    s=${s}'__KH_SOURCE_PORT_PRODUCT__='${__KH_SOURCE_PORT_PRODUCT__}' \n'
    s=${s}'__KH_SOURCE_PORT_ORDER__='${__KH_SOURCE_PORT_ORDER__}' \n'
    s=${s}'__KH_SOURCE_PORT_KTYPE__='${__KH_SOURCE_PORT_KTYPE__}' \n'
    s=${s}'__KH_SOURCE_PORT_MAPPING__='${__KH_SOURCE_PORT_MAPPING__}' \n'
    s=${s}'__KH_SOURCE_PORT_MAILING__='${__KH_SOURCE_PORT_MAILING__}' \n'
    s=${s}'__KH_SOURCE_PORT_TEMPLATE__='${__KH_SOURCE_PORT_TEMPLATE__}' \n'
    s=${s}'__KH_SOURCE_PORT_UI__='${__KH_SOURCE_PORT_UI__}' \n'
    s=${s}'__KH_SOURCE_PORT_RUNAME__='${__KH_SOURCE_PORT_RUNAME__}' \n'
    s=${s}'__KH_SOURCE_PORT_USER__='${__KH_SOURCE_PORT_USER__}' \n'
    s=${s}'__KH_SOURCE_PORT_EBAY__='${__KH_SOURCE_PORT_EBAY__}' \n'
    s=${s}'__KH_SOURCE_PORT_MIRAVIA__='${__KH_SOURCE_PORT_MIRAVIA__}' \n'
    s=${s}'__KH_SOURCE_PORT_AMAZON__='${__KH_SOURCE_PORT_AMAZON__}' \n'
    s=${s}'__KH_SOURCE_PORT_CARRIERCORREOSEXPRESS__='${__KH_SOURCE_PORT_CARRIERCORREOSEXPRESS__}' \n'
    s=${s}'__KH_SOURCE_PORT_PIM__='${__KH_SOURCE_PORT_PIM__}' \n'
    s=${s}'__KH_SOURCE_PORT_ICECAT__='${__KH_SOURCE_PORT_ICECAT__}' \n'
    s=${s}'__KH_SOURCE_PORT_AECOC__='${__KH_SOURCE_PORT_AECOC__}' \n'
    s=${s}'__KH_SOURCE_PORT_RABBITMQ__='${__KH_SOURCE_PORT_RABBITMQ__}' \n'
    s=${s}'\n'
    s=${s}'# PORT FORWARD, TARGET PORTS \n'
    s=${s}'__kh_target_port_api='${__kh_target_port_api}' \n'
    s=${s}'__kh_target_port_bulk='${__kh_target_port_bulk}' \n'
    s=${s}'__kh_target_port_product='${__kh_target_port_product}' \n'
    s=${s}'__kh_target_port_order='${__kh_target_port_order}' \n'
    s=${s}'__kh_target_port_ktype='${__kh_target_port_ktype}' \n'
    s=${s}'__kh_target_port_mapping='${__kh_target_port_mapping}' \n'
    s=${s}'__kh_target_port_mailing='${__kh_target_port_mailing}' \n'
    s=${s}'__kh_target_port_template='${__kh_target_port_template}' \n'
    s=${s}'__kh_target_port_ui='${__kh_target_port_ui}' \n'
    s=${s}'__kh_target_port_runame='${__kh_target_port_runame}' \n'
    s=${s}'__kh_target_port_user='${__kh_target_port_user}' \n'
    s=${s}'__kh_target_port_ebay='${__kh_target_port_ebay}' \n'
    s=${s}'__kh_target_port_miravia='${__kh_target_port_miravia}' \n'
    s=${s}'__kh_target_port_amazon='${__kh_target_port_amazon}' \n'
    s=${s}'__kh_target_port_carriercorreosexpress='${__kh_source_target_carriercorreosexpress}' \n'
    s=${s}'__kh_target_port_pim='${__kh_target_port_pim}' \n'
    s=${s}'__kh_target_port_icecat='${__kh_target_port_icecat}' \n'
    s=${s}'__kh_target_port_aecoc='${__kh_target_port_aecoc}' \n'
    s=${s}'__kh_target_port_rabbitmq='${__kh_target_port_rabbitmq}' \n'
    s=${s}'\n'
    s=${s}'# CLEAN PREVIOUS DEPLOYMENT/POD VARIABLES \n'
    s=${s}'__kh_deployment=''\n'
    s=${s}'__kh_pod=''\n'
    s=${s}'__kh_container=''\n'
    s=${s}'__kh_service=''\n'
    s=${s}'# FILE SOURCED, VARS EMPTIED REFERENCE \n'
    s=${s}'echo '\''file __kh_env_file.sh.txt sourced -- file updated: '${__kh_env_file_updated}\''\n'
    _kh_s=${s}
    unset s
    echo -e ${_kh_s} > ${__kh_env_file}
    echo 'file '\''./tmp/__kh_env_file.sh.txt'\'' written -- time: '${__kh_env_file_updated}

    # clean variables
    __kh_set_service ${__KH_CLEANVARS__}

    # print current variables
    __kh_print_vars

    # kill previous processes
    if [ ${__kh_kubeconfig_changed} = 'true' ] ; then
            k1 2> /dev/null ; k2 2> /dev/null ; k3 2> /dev/null ; k4 2> /dev/null ;
            k5 2> /dev/null ; k6 2> /dev/null ; k7 2> /dev/null ; k8 2> /dev/null ;
    fi

    # jobs
    echo
    jb

    echo 'done!'
}




function __kh_set_service {

    # init
    echo '--> kubectl define: deployment'
    command cd ${__KH_KUBE_HOME__}

    # exit if param ${1} not provided
    if [ -z ${1} ] ; then
        echo 'parameter ${1} required, but not provided -- exit'
        return 1;
    fi

    # param ${1} special value(s)
    if [ ${1} = ${__KH_CLEANVARS__} ] ; then
        __kh_deployment=
        __kh_pod=
        __kh_container=
        __kh_service=
        __kh_source_port=
        __kh_target_port=
        return 0;
    fi

    # define service
    __regex=${1}
    service_list="$( cat ./tmp/get-services.txt )"
    __kh_service=$( echo "${service_list}" | command grep -P -i ${__regex} | command awk '{print $1}' )
    if [ ${__kh_service} = ${__kh_service_api} ] ; then
        __kh_deployment=${__kh_deployment_api}
        __kh_pod=${__kh_pod_api}
        __kh_container=${__kh_container_api}
        # __kh_service=${__kh_service_api}
        __kh_source_port=${__KH_SOURCE_PORT_API__}
        __kh_target_port=${__kh_target_port_api}
    elif [ ${__kh_service} = ${__kh_service_bulk} ] ; then
        __kh_deployment=${__kh_deployment_bulk}
        __kh_pod=${__kh_pod_bulk}
        __kh_container=${__kh_container_bulk}
        # __kh_service=${__kh_service_bulk}
        __kh_source_port=${__KH_SOURCE_PORT_BULK__}
        __kh_target_port=${__kh_target_port_bulk}
    elif [ ${__kh_service} = ${__kh_service_product} ] ; then
        __kh_deployment=${__kh_deployment_product}
        __kh_pod=${__kh_pod_product}
        __kh_container=${__kh_container_product}
        # __kh_service=${__kh_service_product}
        __kh_source_port=${__KH_SOURCE_PORT_PRODUCT__}
        __kh_target_port=${__kh_target_port_product}
    elif [ ${__kh_service} = ${__kh_service_order} ] ; then
        __kh_deployment=${__kh_deployment_order}
        __kh_pod=${__kh_pod_order}
        __kh_container=${__kh_container_order}
        # __kh_service=${__kh_service_order}
        __kh_source_port=${__KH_SOURCE_PORT_ORDER__}
        __kh_target_port=${__kh_target_port_order}
    elif [ ${__kh_service} = ${__kh_service_ktype} ] ; then
        __kh_deployment=${__kh_deployment_ktype}
        __kh_pod=${__kh_pod_ktype}
        __kh_container=${__kh_container_ktype}
        # __kh_service=${__kh_service_ktype}
        __kh_source_port=${__KH_SOURCE_PORT_KTYPE__}
        __kh_target_port=${__kh_target_port_ktype}
    elif [ ${__kh_service} = ${__kh_service_mapping} ] ; then
        __kh_deployment=${__kh_deployment_mapping}
        __kh_pod=${__kh_pod_mapping}
        __kh_container=${__kh_container_mapping}
        # __kh_service=${__kh_service_mapping}
        __kh_source_port=${__KH_SOURCE_PORT_MAPPING__}
        __kh_target_port=${__kh_target_port_mapping}
    elif [ ${__kh_service} = ${__kh_service_mailing} ] ; then
        __kh_deployment=${__kh_deployment_mailing}
        __kh_pod=${__kh_pod_mailing}
        __kh_container=${__kh_container_mailing}
        # __kh_service=${__kh_service_mailing}
        __kh_source_port=${__KH_SOURCE_PORT_MAILING__}
        __kh_target_port=${__kh_target_port_mailing}
    elif [ ${__kh_service} = ${__kh_service_template} ] ; then
        __kh_deployment=${__kh_deployment_template}
        __kh_pod=${__kh_pod_template}
        __kh_container=${__kh_container_template}
        # __kh_service=${__kh_service_template}
        __kh_source_port=${__KH_SOURCE_PORT_TEMPLATE__}
        __kh_target_port=${__kh_target_port_template}
    elif [ ${__kh_service} = ${__kh_service_ui} ] ; then
        __kh_deployment=${__kh_deployment_ui}
        __kh_pod=${__kh_pod_ui}
        __kh_container=${__kh_container_ui}
        # __kh_service=${__kh_service_ui}
        __kh_source_port=${__KH_SOURCE_PORT_UI__}
        __kh_target_port=${__kh_target_port_ui}
    elif [ ${__kh_service} = ${__kh_service_runame} ] ; then
        __kh_deployment=${__kh_deployment_runame}
        __kh_pod=${__kh_pod_runame}
        __kh_container=${__kh_container_runame}
        # __kh_service=${__kh_service_runame}
        __kh_source_port=${__KH_SOURCE_PORT_RUNAME__}
        __kh_target_port=${__kh_target_port_runame}
    elif [ ${__kh_service} = ${__kh_service_user} ] ; then
        __kh_deployment=${__kh_deployment_user}
        __kh_pod=${__kh_pod_user}
        __kh_container=${__kh_container_user}
        # __kh_service=${__kh_service_user}
        __kh_source_port=${__KH_SOURCE_PORT_USER__}
        __kh_target_port=${__kh_target_port_user}
    elif [ ${__kh_service} = ${__kh_service_ebay} ] ; then
        __kh_deployment=${__kh_deployment_ebay}
        __kh_pod=${__kh_pod_ebay}
        __kh_container=${__kh_container_ebay}
        # __kh_service=${__kh_service_ebay}
        __kh_source_port=${__KH_SOURCE_PORT_EBAY__}
        __kh_target_port=${__kh_target_port_ebay}
    elif [ ${__kh_service} = ${__kh_service_miravia} ] ; then
        __kh_deployment=${__kh_deployment_miravia}
        __kh_pod=${__kh_pod_miravia}
        __kh_container=${__kh_container_miravia}
        # __kh_service=${__kh_service_miravia}
        __kh_source_port=${__KH_SOURCE_PORT_MIRAVIA__}
        __kh_target_port=${__kh_target_port_miravia}
    elif [ ${__kh_service} = ${__kh_service_amazon} ] ; then
        __kh_deployment=${__kh_deployment_amazon}
        __kh_pod=${__kh_pod_amazon}
        __kh_container=${__kh_container_amazon}
        # __kh_service=${__kh_service_amazon}
        __kh_source_port=${__KH_SOURCE_PORT_AMAZON__}
        __kh_target_port=${__kh_target_port_amazon}
    elif [ ${__kh_service} = ${__kh_service_carriercorreosexpress} ] ; then
        __kh_deployment=${__kh_deployment_carriercorreosexpress}
        __kh_pod=${__kh_pod_carriercorreosexpress}
        __kh_container=${__kh_container_carriercorreosexpress}
        # __kh_service=${__kh_service_carriercorreosexpress}
        __kh_source_port=${__KH_SOURCE_PORT_CARRIERCORREOSEXPRESS__}
        __kh_target_port=${__kh_target_port_carriercorreosexpress}
    elif [ ${__kh_service} = ${__kh_service_pim} ] ; then
        __kh_deployment=${__kh_deployment_pim}
        __kh_pod=${__kh_pod_pim}
        __kh_container=${__kh_container_pim}
        # __kh_service=${__kh_service_pim}
        __kh_source_port=${__KH_SOURCE_PORT_PIM__}
        __kh_target_port=${__kh_target_port_pim}
    elif [ ${__kh_service} = ${__kh_service_icecat} ] ; then
        __kh_deployment=${__kh_deployment_icecat}
        __kh_pod=${__kh_pod_icecat}
        __kh_container=${__kh_container_icecat}
        # __kh_service=${__kh_service_icecat}
        __kh_source_port=${__KH_SOURCE_PORT_ICECAT__}
        __kh_target_port=${__kh_target_port_icecat}
    elif [ ${__kh_service} = ${__kh_service_aecoc} ] ; then
        __kh_deployment=${__kh_deployment_aecoc}
        __kh_pod=${__kh_pod_aecoc}
        __kh_container=${__kh_container_aecoc}
        # __kh_service=${__kh_service_aecoc}
        __kh_source_port=${__KH_SOURCE_PORT_AECOC__}
        __kh_target_port=${__kh_target_port_aecoc}
    elif [ ${__kh_service} = ${__kh_service_rabbitmq} ] ; then
        __kh_deployment=${__kh_deployment_rabbitmq}
        __kh_pod=${__kh_pod_rabbitmq}
        __kh_container=${__kh_container_rabbitmq}
        # __kh_service=${__kh_service_rabbitmq}
        __kh_source_port=${__KH_SOURCE_PORT_RABBITMQ__}
        __kh_target_port=${__kh_target_port_rabbitmq}
    else
        # allow to pick service/deployment/pod with non-predetermined regex
        deployment_list="$( cat ./tmp/get-deployments.txt )"
        pod_list="$( cat ./tmp/get-pods.txt )"
        __kh_deployment=$( echo "${deployment_list}" | command grep -P -i ${__regex} | command awk '{print $1}' )
        __kh_pod=$( echo "${pod_list}" | command grep -P -i ${__regex} | command awk '{print $1}' )
        __kh_container=${__kh_deployment}
        # __kh_service="${__kh_service}"
        __kh_source_port=$( echo "${service_list}" | command grep -P -i ${__regex} | command awk '{print $5}' | sed '{ s/\/TCP$//ig }' )
        __kh_target_port=10298
    fi
    __kh_print_vars
}




function __kh_print_vars {
    # kubectl variables
    echo 'kubectl print variables'
    # echo '__KH_UPDATED__   : '${__KH_UPDATED__}
    echo '__KH_KUBE_HOME__ : '${__KH_KUBE_HOME__}
    echo '__kh_e_f_updated : '${__kh_env_file_updated}
    echo '__kh_kubeconfig  : '${__kh_kubeconfig}
    echo '__kh_namespace   : '${__kh_namespace}
    echo '__kh_service     : '${__kh_service}
    echo '__kh_deployment  : '${__kh_deployment}
    echo '__kh_pod         : '${__kh_pod}
    echo '__kh_container   : '${__kh_container}
    echo '__kh_source_port : '${__kh_source_port}
    echo '__kh_target_port : '${__kh_target_port}
    echo 'kk               : '${kk}
}




function __kh_log {

    # init, confirm
    command cd ${__KH_KUBE_HOME__}
    echo 'kubectl logs for:'
    echo '__kh_kubeconfig: '${__kh_kubeconfig}
    echo '__kh_pod: '${__kh_pod}
    echo '__kh_container: '${__kh_container}
    ### confirm, disabled due to zerohelper implementation, begin
    # read -p 'continue (y/n)?: ' _continue
    # if [ ${_continue} != 'y'  ] ; then
        # unset _continue
        # echo 'cancelled, no action performed'
        # return 1
    # fi
    ### confirm, end
    # tail flag
    if [ ! -z "${1}" ] ; then
        _tflagq="${1}"
    else
        read -p "tail? ('n' or number): " -e -i '1' _tflagq
    fi
    _tflag=''
    if [ ${_tflagq} == 'n'  ] ; then
        _tflag=''
    else
        _tflag='--tail='${_tflagq}
    fi
    # follow flag
    if [ ! -z "${2}" ] ; then
        _fflagq="${2}"
    else
        read -p 'follow (y/n)?: ' -e -i 'y' _fflagq
    fi
    _fflag='-f'
    if [ ${_fflagq} != 'y'  ] ; then
        _fflag=''
    fi
    # kubectl log 
    _s='kubectl --kubeconfig '${__kh_kubeconfig}' logs '${__kh_pod}' '${__kh_container}' '${_tflag}' '${_fflag}' &> '\''./tmp/'${__kh_container}'.log'\'' & '
    echo 'executing: '
    echo ${_s}
    eval ${_s}
    unset _s _fflag _fflagq _tflag _tflagq
}




function __kh_tail_f {
    if [ -z ${__kh_deployment} ] ; then
        echo 'variable ${__kh_deployment} must be defined -- exit'
        return 1;
    fi
    _s='tf ./tmp/$'{__kh_deployment}'.log'
    eval ${_s}
    unset _s
}




function __kh_less {
    if [ -z ${__kh_deployment} ] ; then
        echo 'variable ${__kh_deployment} must be defined -- exit'
        return 1;
    fi
    _s='less ./tmp/'${__kh_deployment}'.log'
    eval ${_s}
    unset _s
}




function __kh_port_forward {
    if [ -z ${__kh_service} ] ; then
        echo 'variable ${__kh_service} must be defined -- exit'
        return 1;
    fi
    _s=${kk}' port-forward service/'${__kh_service}' '${__kh_source_port}':'${__kh_target_port}' & '
    eval ${_s}
    unset _s
}




function __kh_scale {
    if [ -z ${__kh_deployment} ] ; then
        echo 'variable ${__kh_deployment} must be defined -- exit'
        return 1;
    fi
    _s=${kk}' scale --replicas='${1}' deployment/'${__kh_deployment}
    # confirm
    echo 'POD SCALE -- command to be performed: '${_s}
    read -p 'continue (y/n)?: ' _continue
    if [ ${_continue} != 'y'  ] ; then
        unset _continue
        echo 'cancelled, no action performed'
        return 1
    fi
    eval ${_s}
    unset _s
}




function __kh_rollout_restart {
    if [ -z ${__kh_deployment} ] ; then
        echo 'variable ${__kh_deployment} must be defined -- exit'
        return 1;
    fi
    _s=${kk}' rollout restart deployment/'${__kh_deployment}
    # confirm
    echo 'POD ROLLOUT RESTART -- command to be performed: '${_s}
    read -p 'continue (y/n)?: ' _continue
    if [ ${_continue} != 'y'  ] ; then
        unset _continue
        echo 'cancelled, no action performed'
        return 1
    fi
    eval ${_s}
    unset _s
}




function __kh_get_pods {
    ${kk} get pods > ./tmp/get-pods.txt
    cat ./tmp/get-pods.txt
}




function __kh_describe_pod {
    if [ -z ${__kh_pod} ] ; then
        echo 'variable ${__kh_pod} must be defined -- exit'
        return 1;
    fi
    ${kk} describe pod ${__kh_pod} > ./tmp/describe-pod.txt
    cat ./tmp/describe-pod.txt
}




function __kh_get_services {
    ${kk} get services > ./tmp/get-services.txt
    cat ./tmp/get-services.txt
}




function __kh_describe_service {
    if [ -z ${__kh_service} ] ; then
        echo 'variable ${__kh_service} must be defined -- exit'
        return 1;
    fi
    ${kk} describe service ${__kh_service} > ./tmp/describe-service.txt
    cat ./tmp/describe-service.txt
}




function __kh_get_deployments {
    ${kk} get deployments > ./tmp/get-deployments.txt
    cat ./tmp/get-deployments.txt
}




function __kh_describe_deployment {
    if [ -z ${__kh_deployment} ] ; then
        echo 'variable ${__kh_deployment} must be defined -- exit'
        return 1;
    fi
    ${kk} describe deployment ${__kh_deployment} > ./tmp/describe-deployment.txt
    cat ./tmp/describe-deployment.txt
}




function __kh_status {
    __kh_print_vars
    echo
    head -7 ./tmp/__kh_env.sh.txt
    echo
    jb
}




function __kh_source_env_file {
    __kh_kubeconfig_prev=${__kh_kubeconfig}
    if [ ! -e ./tmp/__kh_env.sh.txt ] ; then
        echo 'file "./tmp/__kh_env.sh.txt" must exist -- exit'
        return 1;
    fi
    source ./tmp/__kh_env.sh.txt
    echo 
    __kh_print_vars
    __kh_kubeconfig_changed='true'
    if [ ${__kh_kubeconfig_prev} = ${__kh_kubeconfig} ] ; then
        __kh_kubeconfig_changed='false'
    fi
    if [ ${__kh_kubeconfig_changed} = 'true'  ] ; then
        k1 2> /dev/null ; k2 2> /dev/null ; k3 2> /dev/null ; k4 2> /dev/null ;
        k5 2> /dev/null ; k6 2> /dev/null ; k7 2> /dev/null ; k8 2> /dev/null ;
    fi
}




function __kh_backup_log_file {
    if [ -z ${__kh_deployment} ] ; then 
        return 1
    fi
    _v_timestamp_s=$( date +'%Y%m%d_%H%M%S' --utc )
    _v_env_name=$( echo ${__kh_kubeconfig} | sed 's/kc-(.*)\.yml/\1/i' )
    _v_source_file='./tmp/'${__kh_deployment}'.log'
    _v_target_file=${__KH_LOG_HISTORY_DIR__}'/'${_v_timestamp_s}'.'${_v_env_name}'.'${__kh_deployment}'.log'
    _v_cmd='command cp -v '${_v_source_file}' '${_v_target_file}
    eval ${_v_cmd}
    unset  _v_timestamp_s  _v_env_name  _v_source_file  _v_target_file  _v_cmd
}




function __kh_help {
    # 2024-08-25: This function may be unnecessary since zerohelper refactoring.
    # Meanwhile, kept for maintenance and further refactoring purposes.
    s='--> Kubectl Helper ('${__KH_UPDATED__}') \n'
    s=${s}'(parameters within parenthesis are optional; also requested via prompt) \n'
    s=${s}'\n'
    s=${s}'  kks : set ($1) kubeconfig-file, ($2) deployment, regex type \n' 
    s=${s}'  kkp : print pre-set variables \n' 
    s=${s}'  kkl : kubectl logs, using pre-set variables, ($1) tail flag '"('n'|digit)"', ($2) follow flag '"('y'|'n')"' \n'
    s=${s}'\n'
    _kh_s=${s}
    unset s
    less -f <( echo -e "${_kh_s}" )
}
alias kh='__kh_help'




function __kh_zerohelper_init {
    # cdkk_s
    command source ./kh-zerohelper.sh.txt
    echo 'updated, main: '${__KH_UPDATED__}
    echo 'alias 0z: '$( alias 0z ) # alias overriding test
    # echo
    __kh_zerohelper_menu
}




function __kh_source_kh_env_file {
    cdkk_s
    command source ./tmp/__kh_env.sh.txt
    echo
    __kh_print_vars
}




### aliases

ZH_ZEROHELPER_INIT='__kh_zerohelper_init'

alias __kh_zerohelper_menu='alias 00 ; echo ; alias 01 02 03 04 ; '
alias __kh_zerohelper_menu_1='alias 1s ; echo ; alias 10 11 12 14 15 17 18 ; echo ; alias 90 92 94 '
alias __kh_zerohelper_menu_2='alias 20 21 22 23 24 ; echo ; alias 25 26 27 28 29 ; echo ; alias 210 215 216 217 225 ; echo ; alias 256 298 299 ; echo ; alias 91 93 95 '
alias __kh_zerohelper_menu_3='alias 30 31 33 34 3b ; echo ; alias 36 36a 36b 36c ;'
alias __kh_zerohelper_menu_4='alias 40 41 42;'


# main menu, current environment query
alias 0z='echo "alias overriding: kh-zerohelper"'
alias 00='__kh_status'

alias 01='__kh_zerohelper_menu_1 # select kubeconfig file'
alias 02='__kh_zerohelper_menu_2 # select service/pod'
alias 03='__kh_zerohelper_menu_3 # service/pod: describe, log/backup, port-forward'
alias 04='__kh_zerohelper_menu_4 # pod: scale'


# aliases, select environment, load environment from file
alias 1s=' __kh_source_env_file ; '
alias 10=' __kh_load '${__KH_REGEX_WM_PRE__}' ; '
alias 11=' __kh_load '${__KH_REGEX_WM1_PRO_GOODBUY__}' ; '
alias 12=' __kh_load '${__KH_REGEX_WM2_PRO_GROUPELGA__}' ; '
alias 14=' __kh_load '${__KH_REGEX_WM4_PRO_HOEPLI__}' ; '
alias 15=' __kh_load '${__KH_REGEX_WM5_PRO_LOGISFASHION_MX__}' ; '
alias 17=' __kh_load '${__KH_REGEX_WM7_PRO_BEB__}' ; '
alias 18=' __kh_load '${__KH_REGEX_WM8_PRO_VEEPEE__}' ; '


# aliases, select service by regex
alias 20='  __kh_set_service '${__KH_REGEX_API__}' ; '
alias 21='  __kh_set_service '${__KH_REGEX_BULK__}' ; '
alias 22='  __kh_set_service '${__KH_REGEX_PRODUCT__}' ; '
alias 23='  __kh_set_service '${__KH_REGEX_ORDER__}' ; '
alias 24='  __kh_set_service '${__KH_REGEX_KTYPE__}' ; '
alias 25='  __kh_set_service '${__KH_REGEX_MAPPING__}' ; '
alias 26='  __kh_set_service '${__KH_REGEX_MAILING__}' ; '
alias 27='  __kh_set_service '${__KH_REGEX_TEMPLATE__}' ; '
alias 28='  __kh_set_service '${__KH_REGEX_UI__}' ; '
alias 29='  __kh_set_service '${__KH_REGEX_RUNAME__}' ; '
alias 210=' __kh_set_service '${__KH_REGEX_USER__}' ; '
alias 215=' __kh_set_service '${__KH_REGEX_EBAY__}' ; '
alias 216=' __kh_set_service '${__KH_REGEX_MIRAVIA__}' ; '
alias 217=' __kh_set_service '${__KH_REGEX_AMAZON__}' ; '
alias 225=' __kh_set_service '${__KH_REGEX_CARRIERCORREOSEXPRESS__}' ; '
alias 230=' __kh_set_service '${__KH_REGEX_PIM__}' ; '
alias 231=' __kh_set_service '${__KH_REGEX_ICECAT__}' ; '
alias 232=' __kh_set_service '${__KH_REGEX_AECOC__}' ; '
alias 256=' __kh_set_service '${__KH_REGEX_RABBITMQ__}' ; '
alias 298=' __kh_set_service '
alias 299=' __kh_set_service '${__KH_REGEX_CLEANVARS__}' ; '


# aliases, read pod logs, attributes, port-forward
alias 30=' __kh_log n y ; '
alias 31=' __kh_log 50 y ; '
alias 33=' __kh_tail_f ; '
alias 34=' __kh_less ; '
alias 3b=' __kh_backup_log_file ; '

alias 36=' __kh_port_forward ; '
alias 36a=' $kk port-forward service/wavemarket-queue-svc-headless '${__KH_SOURCE_PORT_RABBITMQ__}':'${__kh_target_port_rabbitmq}' & '
alias 36b=' $kk port-forward service/lopsided-emu-rabbitmq '${__KH_SOURCE_PORT_RABBITMQ__}':'${__kh_target_port_rabbitmq}' & '
alias 36c=' $kk port-forward service/lopsided-emu-rabbitmq-headless '${__KH_SOURCE_PORT_RABBITMQ__}':'${__kh_target_port_rabbitmq}' & '


# aliases, pod rollout-restart, scale, deploy
alias 40='__kh_scale 0 ; '
alias 41='__kh_scale 1 ; '
alias 42='__kh_rollout_restart ; '


# aliases, kubectl-kubeconfig queries
alias 90=' __kh_get_services ; '
alias 91='  __kh_describe_service ; '
alias 92=' __kh_get_deployments ; '
alias 93='  __kh_describe_deployment ; '
alias 94=' __kh_get_pods ; '
alias 95='  __kh_describe_pod ; '



