#!/bin/bash
# = = = = = = = = = = 
# CUSTOMIZED ALIASES
# = = = = = = = = = = 
#
# See constants section below for update date reference.
#
# INSTALLATION:
# Put a copy of this file in $HOME folder.
# Filename: folowing convention, change to '.git-bash-aliases' when copying to $HOME or %USERPROFILE%
# Insert source hook in bash initialization file:
#    - linux: '~/.bashrc'.
#    - windows git-bash: '/etc/profile.d/aliases'.
# Source hook (edit as convenient):
#    _srcfile='/c/Users/alber/.git-bash-aliases' ; if [ -e ${_srcfile} ] ; then ; command source ${_srcfile} ; echo $( h_greeting ) ; __jh_set_java_version 8 ; fi ; command unset _srcfile ; command cd ~/Desktop ;
#
# REMINDERS:
#    - Script 'update.*' in this folder helps for fast improvement / deployment.
#    - If an alias is to receive input frome pipe, do not use initial 'echo' helping reference.
#    - Sections from the beginning contain aliases intended for both, Windows and Linux OS.
#    - Sections at the end are to contain Windows-specific and Linux-specific aliases.
#



# Constants required for script
__ALIAS_LAST_UPDATE__='2023-08-25 06:31'
__ALIAS_TIMEOUT__='0.3'

__JH_XMS__='8m'
__JH_XMX__='256m'
__JH_SPRING_PROFILES_ACTIVE__='alberto,albertolocalpre' # comma separated values, no whitespace
__JH_JAR_LOG_HOME__=${HOME}'/Desktop/log'

__BHS_FILE__=${HOME}/'.bash-help-src'

__JH_XMS_DEFAULT__=${__JH_XMS__}
__JH_XMX_DEFAULT__=${__JH_XMX__}

__KH_KUBE_HOME__=${HOME}'/Desktop/dm-git-aux/kubeconfig'



# ----------------------------------
# Colors
# ----------------------------------
NOCOLOR='\033[0m'
RED='\033[0;31m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
LIGHTGRAY='\033[0;37m'
DARKGRAY='\033[1;30m'
LIGHTRED='\033[1;31m'
LIGHTGREEN='\033[1;32m'
YELLOW='\033[1;33m'
LIGHTBLUE='\033[1;34m'
LIGHTPURPLE='\033[1;35m'
LIGHTCYAN='\033[1;36m'
WHITE='\033[1;37m'



# ---------------------------------------------------
# General Aliases - file browsing and manipulation
# ---------------------------------------------------
alias e='exit'
alias z='command'
alias l='echo "$(ls -a --color=always)"'
alias ll='ls -lah --color=always'
function _cd { if [ -z ${1} ] ; then return ; else command cd ${1} ; ls ; fi ; }
alias cd='_cd'
alias cp='cp -v'
alias cpr='cp -vr'
alias mv='mv -v'
alias mkdir='mkdir -pv'
alias rm='rm -v'
function _rm_r { echo '--> rm -vfR '"${@}" ; sleep ${__ALIAS_TIMEOUT__} ; command rm -vfR "${@}" ; echo ; ll ; }
alias rmr='_rm_r'
alias tf='tail -f'
alias t='_t'
alias h='_h'
alias hi='_h_index'
function _c_a_c { if [ -z "${1}" ] ; then clear ; else echo | awk '{ print '"${*}"' }' ; fi ; }
alias c='_c_a_c'
alias u='. ${HOME}/.git-bash-aliases ; h_greeting ; h ;'

# testing:
alias lg='ls -a --color=always | grep'
alias llg='ls -la --color=always | grep'
function clg { cd $( ls | grep --color=never $1 ) ; }

# frequently used directories (two variants: user, script)
alias cdk='cd ~/Desktop'
alias cdk_s='command cd ~/Desktop'

alias cdks='cd ~/Desktop/are-git-sandbox'
alias cdks_s='command cd ~/Desktop/are-git-sandbox'

alias cdkb='cd ~/Desktop/are-git-sandbox/bash/bash'
alias cdkb_s='command cd ~/Desktop/are-git-sandbox/bash/bash'

alias cdkj='cd ~/Desktop/dm-git-java'
alias cdkj_s='command cd ~/Desktop/dm-git-java'

alias cdka='cd ~/Desktop/dm-git-aux'
alias cdka_s='command cd ~/Desktop/dm-git-aux'

alias cdkl='cd ~/Desktop/log'
alias cdkl_s='command cd ~/Desktop/log'



# ------------------------------------------------------
# General aliases - text/binary search and processing
# ------------------------------------------------------
alias grep='grep --color=always -P'
alias sed='sed -E'
alias less='less -R -M -i'
alias diff='diff --color=always'
alias od='od -v -An -tx1 -w16'
alias snc='sed -E '\''{ s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g }'\'
alias sinl='sed -E '\''{ s/(.)$/\1\n/g }'\'
alias cn='cat -n'
alias cnsc='cat -n | sed -E '\''s/^[ \t]+([0-9]+)[ \t]+/'$(echo -e -n $BLUE)'\1'$(echo -e -n $NOCOLOR)' /'\'
function _grep_sed_uniq_rf { grep --color=never -r ${1} ./ | sed -E '{ s/^([^:]+):.+$/\1/ }' | uniq ; }
alias gsurf='_grep_sed_uniq_rf '



# ------------------------------------------------------
# General aliases - time
# ------------------------------------------------------
alias date.xs='date +%s'
alias date.sql='date +'\''%Y-%m-%d %H:%M:%S'\'



# -----------------------------------------------------------
# General aliases - fast command/function/variable reference
# -----------------------------------------------------------
function _t { echo '--> declare -p' ${1} ; declare -p ${1} ; echo -e '\n--> type' ${1} ; type ${1} ; }



# ---------------------------------------------------
# General aliases - functions, helpers
# ---------------------------------------------------

function _bhs_line_expand {

    command cat - \
    | command sed -E '{ s/(^[^:]+:)/\n\1\n/g }' \
    | command sed -E '{ s/(Actions?:|Options?:|Examples?:)/\n\1\n/g }' \
    | command sed -E '{ s/(\.)( {2})/\1\n\2/g ; s/( {2};)( {2})/\1\n\2/g }'

}

function _bhs_line_index {

    command cat -n \
    | command sed -E '{ s/^([^:]+):(.*)$/\1/g }'

}

function _h { 

    if [ ! -e ${__BHS_FILE__} ] 
    then
        echo 'source file does not exist'
        return 1
    fi

    h_greeting
    command head -1 ${__BHS_FILE__}

    if [ -z $1 ]
    then
        echo 'arg ${1} empty'
    else
        command grep --color=always -P '^'${1}':' ${__BHS_FILE__} | _bhs_line_expand
    fi
}

function _h_index { 

    if [ ! -e ${__BHS_FILE__} ] 
    then
        echo 'source file does not exist'
        return 1
    fi

    _s=$(h_greeting)'\n'
    _s=${_s}$(command head -1 ${__BHS_FILE__})'\n'
    _s=${_s}"$(command grep --color=never -P '^[0-9A-Za-z]{2,}:' ${__BHS_FILE__} | _bhs_line_index)"
    command less -f <( echo -e "${_s}" )
    
    unset _s
    
}


function print_fn { 
    type $1 | tr '\n' ' ' | command sed -E 's/[ ]{2,}/ /g' ; 
}

function h_last_update { 
    echo ${__ALIAS_LAST_UPDATE__} ; 
}
function h_greeting { 
    echo '# GBA -- updated: '${__ALIAS_LAST_UPDATE__} ; 
}



# ------------------------------------------------------
# Java Aliases - java automation
# ------------------------------------------------------

alias mc='echo "--> mvn clean"; sleep ${__ALIAS_TIMEOUT__}; mvn clean'
alias mci='echo "--> mvn clean install -U -Dmaven.test.skip=true"; sleep ${__ALIAS_TIMEOUT__}; mvn clean install -U -Dmaven.test.skip=true'
alias mcc='echo "--> mvn -T 1C clean compile -Dmaven.test.skip=true --offline"; sleep ${__ALIAS_TIMEOUT__}; mvn -T 1C clean compile -Dmaven.test.skip=true --offline'
alias mcp='echo "--> mvn -T 1C clean package -Dmaven.test.skip=true --offline"; sleep ${__ALIAS_TIMEOUT__}; mvn -T 1C clean package -Dmaven.test.skip=true --offline'
alias mp='echo "--> mvn -T 1C package -Dmaven.test.skip=true --offline"; sleep ${__ALIAS_TIMEOUT__}; mvn -T 1C package -Dmaven.test.skip=true --offline'
alias mrjr='echo "--> mvn -T 1C resources:resources jar:jar spring-boot:repackage -Dmaven.test.skip=true --offline"; sleep ${__ALIAS_TIMEOUT__}; mvn -T 1C resources:resources jar:jar spring-boot:repackage -Dmaven.test.skip=true --offline'
alias mec='echo "--> mvn clean eclipse:clean"; sleep ${__ALIAS_TIMEOUT__}; mvn clean eclipse:clean'
alias mdt='echo "--> mvn dependency:tree"; sleep ${__ALIAS_TIMEOUT__}; mvn dependency:tree'
alias mdr='echo "--> mvn dependency:resolve -U"; sleep ${__ALIAS_TIMEOUT__}; mvn dependency:resolve -U'
alias mdp='echo "--> mvn dependency:purge-local-repository"; sleep ${__ALIAS_TIMEOUT__}; echo "# just as reminder, execute manually"'



function __jh_set_java_version {

    # save initial dir into var
    init_dir=$( pwd )


    # redefine JAVA_HOME
    if [ -z ${1} ]
    then
        echo 'var ${1} should be "8" or "11"'
        return 1;
    elif [ ${1} = '8' ]
    then
        command cd $JAVA_8_HOME
    elif [ ${1} = '11' ]
    then
        command cd $JAVA_11_HOME
    elif [ ${1} = '17' ]
    then
        command cd $JAVA_17_HOME
    else
        echo 'var ${1} should be "8" or "11"'
        return 1;
    fi
    JAVA_HOME=$( pwd )


    # delete current jdk from PATH
    path_tmp1=$( sed -E 's/:[^:]+java[/]jdk[^:]+//g' <( echo ${PATH} ) ) 


    # append executables dir in new JAVA_HOME to PATH
    command cd ./bin
    path_tmp2=${path_tmp1}':'$( pwd )
    PATH=${path_tmp2}


    # return to initial dir
    command cd ${init_dir}


    # unset temporal vars
    unset path_tmp1 path_tmp2 init_dir

    # verifications
    echo '--> set java version'
    # echo
    # echo 'JAVA_HOME: '${JAVA_HOME} # debugging
    # echo
    # echo 'PATH: '$( grep --color=always -P ':[^:]+java/jdk[^:]+' <( echo $PATH ) ) # debugging
    # echo
    java -version

}

alias sj8='__jh_set_java_version 8'
alias sj11='__jh_set_java_version 11'
alias sj17='__set_java_version 17'



function _t_k { 
    if [ -z ${1} ]
    then 
        if [ -e ./target/*jar ] ; then 
            jarfile=$( ls ./target/*.jar )
            _pid=$( jps -l | grep -P --color=never "${jarfile}" | awk '{ print $1 }' )
            echo ${_pid}
            jps -l | grep -P --color=always "${jarfile}"
            taskkill //f //pid "${_pid}"
        else 
            echo 'file ./target/*.jar must exist or PID must be provided'
        fi
    else 
        _n=$( echo ${1} | grep -P --color=never '^[0-9]+$' )
        if [ -z ${_n} ]
        then 
            _s=$( jps -l | grep --color=never "${1}" )
            echo "${_s}"; 
            _pid=$( echo "${_s}" | awk '{ print $1 }' )
        else 
            _pid=$( echo ${_n} )
        fi
        
        echo "${_pid}"
        taskkill //f //pid "${_pid}"
    fi
    unset _pid _s _n
} 

alias tk='_t_k'



function _j_j { 

    if [ -z ${1} ]
    then 
        # set 'localalberto' # sets value of ${1}
        echo 'arg ${1} is empty, using default - __JH_SPRING_PROFILES_ACTIVE__:'\'${__JH_SPRING_PROFILES_ACTIVE__}\'
    else
        __JH_SPRING_PROFILES_ACTIVE__=${1}
        echo 'arg ${1} is populated, __JH_SPRING_PROFILES_ACTIVE__ set to '\'${1}\' 
    fi
    
    if [ -e ./target/*jar ] ; then
        tk
	echo
	
	jarfile=$( ls ./target/*.jar )
    _cmd_str='javaw -Xms'${__JH_XMS__}' -Xmx'${__JH_XMX__}' -Dfile.encoding=UTF-8 -Dspring.profiles.active='${__JH_SPRING_PROFILES_ACTIVE__}' -jar '${jarfile}' & ' # using '' to delimit values in java parameters is faulty-prone	echo "${_cmd_str}"
	eval ${_cmd_str}
	disown ${!}
	unset _cmd_str
    else
        echo 'file ./target/*jar must exist'
    fi
}
alias jj='_j_j'



function _j_j_r { 

    if [ -z ${1} ]
    then 
        # set 'localalberto' # sets value of ${1}
        echo 'arg ${1} is empty, using default - __JH_SPRING_PROFILES_ACTIVE__:'\'${__JH_SPRING_PROFILES_ACTIVE__}\'
    else
        __JH_SPRING_PROFILES_ACTIVE__=${1}
        echo 'arg ${1} is populated, __JH_SPRING_PROFILES_ACTIVE__ set to '\'${1}\' 
    fi

    if [ -e ./target/*jar ] ; then
	tk
	echo
        
	jarfile=$( ls ./target/*.jar )
	jarlogfile=${__JH_JAR_LOG_HOME__}/$( basename ${jarfile} )'.log'
	echo 'jarfile: '${jarfile}
	echo -n '' > ${jarlogfile}
	echo -e 'jarlogfile cleaned, wc: '$( wc ${jarlogfile} )'\n'
        
	_cmd_str='javaw -Xms'${__JH_XMS__}' -Xmx'${__JH_XMX__}' -Dfile.encoding=UTF-8 -Dspring.profiles.active='${__JH_SPRING_PROFILES_ACTIVE__}' -jar '${jarfile}' &>> '${jarlogfile}' & ' # using '' to delimit values in java parameters is faulty-prone
	echo "${_cmd_str}"
	eval ${_cmd_str}
	disown ${!}
	unset _cmd_str
    else
        echo 'file ./target/*jar must exist'
    fi
}
alias jjr='_j_j_r'



function _jjrg {

    echo 'arg search, ${1}: '\'"${1}"\'
    
    # __JH_JAR_LOG_HOME__=${HOME}'/Desktop/log' # deprecated
    echo 'jar log home: '${__JH_JAR_LOG_HOME__}

    if [ -e ./target/*jar ]
    then
        jarfile=$( command ls ./target/*.jar )
        _cmd_str='command grep --color=always -P -i '\'"${1}"\'' '${__JH_JAR_LOG_HOME__}/$( basename $( command ls ./target/*jar ) )'.log'
        echo "${_cmd_str}"
        eval ${_cmd_str}
	__grc__=${?}
        unset _cmd_str
	echo 'grep exit code: '${__grc__}
    else
        echo 'file ./target/*jar must exist'
    fi
    return ${__grc__}
}
alias jjrg='_jjrg'
alias jjrgts='_jjrg '\''tomcat started'\'



function _j_l { 

    # all java processes
    jps -l

    
    # current dir java process
    if [ -e ./target/*jar ]
    then
        jarfile=$( basename $( ls ./target/*jar ) )
        if [ ! -z ${jarfile} ]
        then
            echo
            jps -l | grep --color=always ${jarfile}
        fi
    fi

    
    # arg ${1} java process
    if [ ! -z ${1} ]
    then 
        echo
        _s=$( jps -l | grep --color=always -P --color=always "${1}" )
        if [ ! -z "${_s}" ]
        then 
            echo "${_s}"
            else echo '"'${1}'": no results'
        fi
    fi
}

alias jl='_j_l'



function _g {

if [ -e ./gradlew ] ; then
    echo '--> ./gradlew '${*}
    ./gradlew ${*}
else
    echo 'file '\''./gradlew'\'' does not exist in current dir'
fi


}

alias g='_g'




function __jh_bootstrap_prop_for_local {
    if [ ! -e ./src/main/resources/bootstrap-alberto.properties ]
    then
        echo 'file '\''./src/main/resources/bootstrap-alberto.properties'\'' does not exist, exit'
        return 1
    fi
    echo '--> '\''bootstrap.properties'\'' for local (copy from '\''alberto'\'' file):'
    command cp -v ./src/main/resources/bootstrap-alberto.properties ./src/main/resources/bootstrap.properties
    cat ./src/main/resources/bootstrap.properties
    echo
}

alias bl='__jh_bootstrap_prop_for_local'



function __jh_bootstrap_prop_for_commit {
    if [ ! -e ./src/main/resources/bootstrap.properties ]
    then
        echo 'file '\''./src/main/resources/bootstrap.properties'\'' does not exist, exit'
        return 1
    fi
    echo '--> '\''bootstrap.properties'\'' for commit (restore from '\''dev'\'' branch):'
    command git restore --source dev ./src/main/resources/bootstrap.properties
    cat ./src/main/resources/bootstrap.properties
    echo
}

alias bo='__jh_bootstrap_prop_for_commit'



s='--> Java Helper -- updated: ('${__ALIAS_LAST_UPDATE__}') \n'
s=${s}'(commands are better tuned to be executed from maven project root folder)\n'
s=${s}'  jl  : jps -l \n'
s=${s}'  jj  : java -jar \n'
s=${s}'  jjr : java -jar ./${jar_file} > ${log_file} \n'
s=${s}'\n'
s=${s}'  jjrg  : grep -P -i ${1} ${log_file} \n'
s=${s}'  jjrgts: grep -P -i '\''tomcat started'\'' ${log_file} \n'
s=${s}'\n'
s=${s}'  mc  : mvn clean \n'
s=${s}'  mci : mvn clean install -U -Dmaven.test.skip=true \n'
s=${s}'  mcc : mvn -T 1C clean compile -Dmaven.test.skip=true --offline \n'
s=${s}'  mcp : mvn -T 1C clean package -Dmaven.test.skip=true --offline \n'
s=${s}'  mp  : mvn -T 1C package -Dmaven.test.skip=true --offline \n'
s=${s}'  mrjr: mvn -T 1C resources:resources jar:jar spring-boot:repackage -Dmaven.test.skip=true --offline \n'
s=${s}'  mec : mvn clean eclipse:clean \n'
s=${s}'\n'
s=${s}'  mdt : mvn dependency:tree \n'
s=${s}'  mdr : mvn dependency:resolve -U \n'
s=${s}'  mdp : mvn dependency:purge-local-repository -U \n'
s=${s}'\n'
s=${s}'  g   : ./gradlew \n'
s=${s}'\n'
s=${s}'  tk  : taskkill -- (mvn_folder_no_arg / pid / jps_name) \n'
s=${s}'\n'
s=${s}'  bl  : '\''./src/main/resources/bootstrap.properties'\'' for local \n'
s=${s}'  bo  : '\''./src/main/resources/bootstrap.properties'\'' for commit \n'
_jh_s=${s}
unset s
alias jh='less -f <( echo -e "${_jh_s}")'



# ------------------------------------------------------
# Git Aliases
# ------------------------------------------------------

# alias gs='echo "--> git status"; sleep ${__ALIAS_TIMEOUT__}; git status'
# previously requires: git config --system color.status always ; git config --system color.branch always ; 
# check configurations: git config --list | grep color ;
function _gs { echo '--> *git status' ; git status ; echo ; git log --graph --decorate --color -1 ; echo -e '\n--> git stash list' ; git stash list ; }
alias gs='_gs'
alias gsi='echo "--> git status --ignored"; sleep ${__ALIAS_TIMEOUT__}; git status --ignored'
alias gl='echo "--> git log --graph --decorate"; sleep ${__ALIAS_TIMEOUT__}; git log --graph --decorate'
alias gla='echo "--> git log --graph --decorate --all"; sleep ${__ALIAS_TIMEOUT__}; git log --graph --decorate --all'
alias gl1='echo "--> git log --graph --decorate -1"; sleep ${__ALIAS_TIMEOUT__}; echo ; git log --graph --decorate -1'
alias glf='echo "--> git ls-files"; sleep ${__ALIAS_TIMEOUT__}; git ls-files'

function _gb { echo '--> git branch (also "git b" is available)' ; sleep ${__ALIAS_TIMEOUT__}; git branch ${@} ; echo ; git log --graph --decorate -1 ; }
alias gb='_gb'
alias gbd='echo "--> git branch -D <local-branches>"; sleep ${__ALIAS_TIMEOUT__}; git branch | command grep -v '\'\*\'' | xargs git branch -D'
# DEPRECATE: _gbto, gbto
function _gbto { echo "--> recreate branch 'to' on HEAD (included in alias '\''gbt'\'')" ; git branch -D to ; git branch to ; git log --graph --decorate --color -1 ; }
alias gbto='_gbto'
# DEPRECATE: _gbt, gbt
function _gbt { 
    # save current branch name
    current_branch=$(git branch --show-current)
    # require human confirmation
    echo "--> soft reset of branch 't' over '"${current_branch}"'"
    read -p 'continue (y/n)? ' continue
    if [ ${continue} != 'y'  ] ; then
        unset current_branch continue
        echo 'cancelled, no action performed'
        return 1
    fi
    # checkout branch 'to', recreate branch 'too' on 'to'
    git checkout 'to'
    git branch -D 'too'
    git branch 'too'
    # checkout branch 't', recreate branch 'to' on 't'
    git checkout 't'
    git branch -D 'to'
    git branch 'to'
    # soft reset of branch 't' on $current_branch
    git checkout 't'
    git reset --soft ${current_branch}
    git checkout ${current_branch}
    git log --graph --decorate --color -1
    read -p 'single line commit message, edit: ' -e -i "${current_branch}"' cont.' new_commit_message
    git commit -m "${new_commit_message}"
    git checkout 't'
    git merge ${current_branch}
    git checkout ${current_branch}
    # show logs
    git log --graph --decorate --all --color | less -R
    git log --graph --decorate --color -1
    unset current_branch new_commit_message
    echo 'done!'
}
alias gbt='_gbt'
alias gt='echo "--> git tag"; sleep ${__ALIAS_TIMEOUT__}; git tag'
alias gtt='echo "--> git tag | tail -3"; sleep ${__ALIAS_TIMEOUT__}; git tag | tail -3'

alias gch='echo "--> *git checkout"; sleep ${__ALIAS_TIMEOUT__}; git checkout'
function _ga { echo '--> git add' "${@}" ; sleep ${__ALIAS_TIMEOUT__} ; git add "${@}" ; echo ; gs ; } 
alias ga='_ga'
function _gra { echo '--> *git restore --staged' "${@}" ; sleep ${__ALIAS_TIMEOUT__} ; git restore --staged "${@}" ; echo ; gs ; }
alias gra='_gra'
alias gd='echo "--> *git diff"; sleep ${__ALIAS_TIMEOUT__}; git diff'
alias gdc='echo "--> *git diff --cached"; sleep ${__ALIAS_TIMEOUT__}; git diff --cached'
alias gco='echo "--> git commit"; sleep ${__ALIAS_TIMEOUT__}; git commit' 
alias gro='echo "--> *git restore --source "; sleep ${__ALIAS_TIMEOUT__}; git restore --source'

alias gm='echo "--> *git merge" ; sleep ${__ALIAS_TIMEOUT__} ; git merge'
alias gms='echo "--> *git merge --squash" ; sleep ${__ALIAS_TIMEOUT__} ; git merge --squash'
alias gri='echo "--> *git rebase --interactive" ; sleep ${__ALIAS_TIMEOUT__} ; git rebase --interactive'
alias grs='echo "--> *git reset --soft" ; sleep ${__ALIAS_TIMEOUT__} ; git reset --soft'

alias gf='echo "--> git fetch"; sleep ${__ALIAS_TIMEOUT__}; git fetch ; echo ; gs'
alias gpl='echo "--> git pull"; sleep ${__ALIAS_TIMEOUT__}; git pull'
alias gps='echo "--> git push"; sleep ${__ALIAS_TIMEOUT__}; git push'

alias gpss='echo "--> git push --set-upstream origin <current-branch>"; sleep ${__ALIAS_TIMEOUT__}; git push --set-upstream origin $( git branch --show-current )'
alias gpsd='echo "--> git push origin --delete <current-branch>"; sleep ${__ALIAS_TIMEOUT__}; git push origin --delete $( git branch --show-current )'

alias gz='echo "--> git stash"; sleep ${__ALIAS_TIMEOUT__}; git stash'
alias gzl='echo "--> git stash list"; sleep ${__ALIAS_TIMEOUT__}; git stash list'
alias gzs='echo "--> git stash show --stat -p"; sleep ${__ALIAS_TIMEOUT__}; git stash show --stat -p'
alias gzp='echo "--> git stash pop"; sleep ${__ALIAS_TIMEOUT__}; git stash pop'
alias gza='echo "--> git stash apply"; sleep ${__ALIAS_TIMEOUT__}; git stash apply'
alias gzd='echo "--> git stash drop"; sleep ${__ALIAS_TIMEOUT__}; git stash drop'
alias gzc='echo "--> git stash clear"; sleep ${__ALIAS_TIMEOUT__}; git stash clear'




s='--> Git Helper ('${__ALIAS_LAST_UPDATE__}') \n'
s=${s}'  (*: git alias available) \n' 
s=${s}'  gs   : git status \n' 
s=${s}'  gsi  : git status --ignored \n' 
s=${s}'  gl*  : git log --graph --decorate \n'
s=${s}'  gl1  : git log --graph --decorate -1 \n'
s=${s}'  gla  : git log --graph --decorate --all  \n'
s=${s}'  glf  : git ls-files \n'
s=${s}'\n'
s=${s}'  gb*  : git branch \n'
s=${s}'  gbd  : git branch -D <local-branches> \n'
s=${s}'  gt   : git tag \n'
s=${s}'  gtt  : git tag | tail -3 \n'
s=${s}'  gbt  : soft reset of '\''t'\'' over current branch, recreate branches '\''to'\'', '\''too'\'' # DEPRECATE \n'
s=${s}'  gbto : recreate branch '\''to'\'' on HEAD (included in alias '\''gbt'\'') # DEPRECATE \n'
s=${s}'\n'
s=${s}'  gch* : git checkout \n'
s=${s}'  ga*  : git add \n'
s=${s}'  gra* : git restore --staged \n'
s=${s}'  gd*  : git diff \n'
s=${s}'  gdc* : git diff --cached \n'
s=${s}'  gco  : git commit \n'
s=${s}'  gro* : git restore --source \n'
s=${s}'\n'
s=${s}'  gm*  : git merge \n'
s=${s}'  gms* : git merge --squash \n'
s=${s}'  gri* : git rebase --interactive \n'
s=${s}'  grs* : git reset --soft \n'
s=${s}'\n'
s=${s}'  gf  : git fetch \n'
s=${s}'  gpl : git pull \n'
s=${s}'  gps : git push \n'
s=${s}'\n'
s=${s}'  gpss: git push --set-upstream origin <branch> \n'
s=${s}'  gpsd: git push origin --delete <branch> \n'
s=${s}'\n'
s=${s}'  gz  : git stash \n'
s=${s}'  gzl : git stash list \n'
s=${s}'  gzs : git stash show --stat -p \n'
s=${s}'  gzp : git stash pop \n'
s=${s}'  gza : git stash apply \n'
s=${s}'  gzd : git stash drop \n'
s=${s}'  gzc : git stash clear \n'
_gh_s=${s}
unset s
alias gh='less -f <( echo -e "${_gh_s}" )'



# ------------------------------------------------------
# Specific Windows OS Aliases
# ------------------------------------------------------

uname | command grep -P -i '(mingw|window)' > /dev/null

__kernel_is_windows__=$( echo $? )

if [ ${__kernel_is_windows__} -eq '0'  ]; then
    alias wsl='clear ; winpty wsl'
    alias s='echo "--> start"; sleep ${__ALIAS_TIMEOUT__}; start'
    alias python='winpty python'
    alias ipython='winpty ipython'
    function _npp { notepad++ ${*} & disown ${!} ; }
    alias npp='_npp'
fi

unset __kernel_is_windows__



# ------------------------------------------------------
# Specific Linux OS Aliases
# ------------------------------------------------------

uname | command grep -P -i '(linux)' > /dev/null

__kernel_is_linux__=$( echo $? )

if [ ${__kernel_is_linux__} -eq '0'  ]; then
    alias xo='echo "--> xdg-open"; sleep ${__ALIAS_TIMEOUT__}; xdg-open'
fi

unset __kernel_is_linux__




# ------------------------------------------------------
# Kubectl
# ------------------------------------------------------

function _kks {
    
    # iniit
    echo '--> kubectl define: kubeconfig, deployment, pod, $kk'
    command cd ${__KH_KUBE_HOME__}
    
    # define __kh_kubeconfig
    kubeconfig_list="$( command ls *.yml )"
    if [ -z ${1} ] ; then
        echo -e 'KUBECONFIG -- AVAILABLE OPTIONS:\n'"${kubeconfig_list}"'\n' | less
        read -p 'regexp for kubeconfig ('\''n'\'' to exit): ' kubeconfig_regex
        if [ ${kubeconfig_regex} = 'n'  ] ; then
            echo 'cancelled!'
            return 1
        fi
    else
        kubeconfig_regex=${1}
    fi
    __kh_kubeconfig=$( echo "${kubeconfig_list}" | command grep -P -i ${kubeconfig_regex} | command awk '{print $1}' )
    echo '__kh_kubeconfig: '${__kh_kubeconfig}
    
    # define kk
    kk='command kubectl --kubeconfig '${__kh_kubeconfig}
    echo 'kk: '${kk}
    
    # define __kh_deployment
    echo -n 'executing '\'${kk}' get deployments'\'' ... '
    deployment_list="$( ${kk} get deployments )"
    echo 'done'
    if [ -z ${2} ] ; then
        echo 'DEPLOYMENTS -- AVAILABLE OPTIONS: \n'"${deployment_list}"'\n' | less
        read -p 'regexp for deployment ('\''n'\'' to exit): ' deployment_regex
        if [ ${deployment_regex} = 'n'  ] ; then
            echo 'cancelled!'
            return 1
        fi
    else
        deployment_regex=${2}
    fi
    __kh_deployment=$( echo "${deployment_list}" | command grep -P -i ${deployment_regex} | command awk '{print $1}' )
    echo '__kh_deployment: '${__kh_deployment}
    
    # define __kh_pod
    echo -n 'executing '\'${kk}' get pods'\'' ... '
    pod_list="$( ${kk} get pods )"
    pod_regex=${deployment_regex}
    echo 'done'
    __kh_pod=$( echo "${pod_list}" | command grep -P -i ${pod_regex} | command awk '{print $1}' )
    echo '__kh_pod: '${__kh_pod}
    
    # define __kh_container
    __kh_container=${__kh_deployment}
    echo '__kh_container: '${__kh_container}
    
    # end
    unset kubeconfig_list kubeconfig_regex 
    unset deployment_list deployment_regex 
    unset pod_list pod_regex
    echo 'done!'
    
}
alias kks='_kks'




function _kkv {
    # kubectl variables
    echo 'kubectl variables'
    echo '__KH_KUBE_HOME__ : '${__KH_KUBE_HOME__}
    echo '__kh_kubeconfig  : '${__kh_kubeconfig}
    echo '__kh_deployment  : '${__kh_deployment}
    echo '__kh_pod         : '${__kh_pod}
    echo '__kh_container   : '${__kh_container}
    echo 'kk               : '${kk}
    echo 'done!'
}
alias kkv='_kkv'



function _kkl {
    
    # init, confirm
    command cd ${__KH_KUBE_HOME__}
    echo 'kubectl logs for:'
    echo '__kh_kubeconfig: '${__kh_kubeconfig}
    echo '__kh_pod: '${__kh_pod}
    echo '__kh_container: '${__kh_container}
    read -p 'continue (y/n)? ' continue
    if [ ${continue} != 'y'  ] ; then
        unset continue
        echo 'cancelled, no action performed'
        return 1
    fi

    # kubectl log 
    echo 'executing '\''kubectl --kubeconfig '${__kh_kubeconfig}' logs '${__kh_pod}' '${__kh_container}' -f &'\'
    kubectl --kubeconfig ${__kh_kubeconfig} logs ${__kh_pod} ${__kh_container} -f |& tee './tmp/'${__kh_container}'.log' &

}
alias kkl='_kkl'


