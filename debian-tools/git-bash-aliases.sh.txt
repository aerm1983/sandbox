#!/bin/bash
# = = = = = = = = = = 
# CUSTOMIZED ALIASES
# = = = = = = = = = = 
#
# See constants section below for update date reference.
#
# INSTALLATION:
# Put a copy of this file in $HOME folder.
# Filename: folowing convention, change to '.git-bash-aliases' when copying to $HOME or %USERPROFILE%
# Insert source hook in bash initialization file:
#    - linux: '~/.bashrc'.
#    - windows git-bash: '/etc/profile.d/aliases'.
# Source hook (edit as convenient):
#    _srcfile='/c/Users/alber/.git-bash-aliases' ; if [ -e ${_srcfile} ] ; then ; command source ${_srcfile} ; echo $( h_greeting ) ; fi ; command unset _srcfile ; 
#
# REMINDERS:
#    - Script 'update.*' in this folder helps for fast improvement / deployment.
#    - If an alias is to receive input frome pipe, do not use initial 'echo' helping reference.
#    - Sections from the beginning contain aliases intended for both, Windows and Linux OS.
#    - Sections at the end are to contain Windows-specific and Linux-specific aliases.
#



# Constants required for script
__ALIAS_LAST_UPDATE__='2022-10-11 10:30'
__ALIAS_TIMEOUT__='0.3'



# ----------------------------------
# Colors
# ----------------------------------
NOCOLOR='\033[0m'
RED='\033[0;31m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
LIGHTGRAY='\033[0;37m'
DARKGRAY='\033[1;30m'
LIGHTRED='\033[1;31m'
LIGHTGREEN='\033[1;32m'
YELLOW='\033[1;33m'
LIGHTBLUE='\033[1;34m'
LIGHTPURPLE='\033[1;35m'
LIGHTCYAN='\033[1;36m'
WHITE='\033[1;37m'



# ---------------------------------------------------
# General Aliases - file browsing and manipulation
# ---------------------------------------------------
alias e='exit'
alias l='echo "$(ls -a --color=always)"'
alias ll='ls -lah --color=always'
function _cd { if [ -z ${1} ] ; then exit ; else command cd ${1} ; ls ; fi ; }
alias cd='_cd'
alias cp='cp -v'
alias mv='mv -v'
alias rm='rm -v'
function _rm_r { echo '--> rm -vfR '"${@}" ; sleep ${__ALIAS_TIMEOUT__} ; command rm -vfR "${@}" ; echo ; ll ; }
alias rmr='_rm_r'
function _c_a_c { if [ -z "${1}" ] ; then clear ; else echo | awk '{ print '"${*}"' }' ; fi ; }
alias c='_c_a_c'
alias u='. ${HOME}/.git-bash-aliases ; h_greeting ; h ;'

# testing:
alias lg='ls -a --color=always | grep'
alias llg='ls -la --color=always | grep'
function clg { cd $( ls | grep --color=never $1 ) ; }

# frequently used directories (two variants: user, script)
alias cdk='cd ~/Desktop'
alias cdk_s='command cd ~/Desktop'

alias cdks='cd ~/Desktop/are-git-sandbox'
alias cdks_s='command cd ~/Desktop/are-git-sandbox'

alias cdkj='cd ~/Desktop/dm-git-java'
alias cdkj_s='command cd ~/Desktop/dm-git-java'

alias cdkl='cd ~/Desktop/log'
alias cdkl_s='command cd ~/Desktop/log'



# ------------------------------------------------------
# General aliases - text/binary search and processing
# ------------------------------------------------------
alias grep='grep --color=always -P'
alias sed='sed -E'
alias less='less -R -M -i'
alias diff='diff --color=always'
alias od='od -v -An -tx1 -w16'
alias snc='sed -E '\''{ s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g }'\'
alias siel='sed -E '\''{ s/(.)$/\1\n/g }'\'
alias csnc='cat -n | sed -E '\''s/^[ \t]+([0-9]+)[ \t]+/'$(echo -e -n $BLUE)'\1'$(echo -e -n $NOCOLOR)' /'\'
function _grep_sed_uniq_rf { grep --color=never -r ${1} ./ | sed -E '{ s/^([^:]+):.+$/\1/ }' | uniq ; }
alias gsurf='_grep_sed_uniq_rf '



# ------------------------------------------------------
# General aliases - time
# ------------------------------------------------------
alias date.xs='date +%s'
alias date.sql='date +'\''%Y-%m-%d %H:%M:%S'\'



# -----------------------------------------------------------
# General aliases - fast command/function/variable reference
# -----------------------------------------------------------
function t { echo '--> declare -p' ${1} ; declare -p ${1} ; echo -e '\n--> type' ${1} ; type ${1} ; }



# ---------------------------------------------------
# General aliases - functions, helpers
# ---------------------------------------------------
function _bhs_line_expand {
    command sed -E '{ s/( {2};)( {2})/\1\n\2/g ; s/(^[^:]+:|Actions?:|Options?:|Examples?:)/\n\1\n/g ; s/(\.)( {2})/\1\n\2/g ; }'
}

function h { 

    BHS_FILE=${HOME}/.bash-help-src
    if [ ! -e ${BHS_FILE} ] 
    then
        echo 'source file does not exist'
        return 1
    fi

    h_greeting
    command grep --color=always -P 'updated:' ${BHS_FILE}

    if [ -z $1 ]
    then
        echo 'arg ${1} empty'
    else
        command grep --color=always -P '^'${1}':' ${BHS_FILE} | _bhs_line_expand
    fi
}

function print_fn { 
    type $1 | tr '\n' ' ' | command sed -E 's/[ ]{2,}/ /g' ; 
}

function h_last_update { 
    echo ${__ALIAS_LAST_UPDATE__} ; 
}
function h_greeting { 
    echo '# GBA -- updated: '${__ALIAS_LAST_UPDATE__} ; 
}



# ------------------------------------------------------
# Java Aliases - java automation
# ------------------------------------------------------

alias sj8='. ~/.set-java-version 8'
alias sj11='. ~/.set-java-version 11'

alias mc='mvn clean'
alias mcp='mvn clean package -Dmaven.test.skip=true'

function _j_j { 

    if [ -z ${1}]
    then 
        set 'localalberto'
        echo 'asigning '\'"${1}"\'' as arg1'
    fi
    
    if [ -e ./target/*jar ] ; then
        tk
	echo
	
	jarfile=$( ls ./target/*.jar )
        _cmd_str='java -Dspring.profiles.active='\'"${1}"\'' -jar '${jarfile}' & '
	echo "${_cmd_str}"
	eval ${_cmd_str}
	disown ${!}
	unset _cmd_str
    else
        echo 'file ./target/*jar must exist'
    fi
}
alias jj='_j_j'



function _j_j_r { 

    if [ -z ${1}]
    then
        set 'localalberto'
        echo 'asigning '\'"${1}"\'' as arg1'
    fi
    
    JAR_LOG_FOLDER=${HOME}'/Desktop/log'

    if [ -e ./target/*jar ] ; then
	tk
	echo
        
	jarfile=$( ls ./target/*.jar )
	# jarlogfile=${JAR_LOG_FOLDER}/$( basename $( ls ./target/*jar ) )'.log'
	jarlogfile=${JAR_LOG_FOLDER}/$( basename ${jarfile} )'.log'
	echo 'jarfile: '${jarfile}
	echo -n '' > ${jarlogfile}
	echo -e 'jarlogfile cleaned, wc: '$( wc ${jarlogfile} )'\n'
        
	_cmd_str='java -Dspring.profiles.active='\'"${1}"\'' -jar '${jarfile}' &>> '${jarlogfile}' & '
	echo "${_cmd_str}"
	eval ${_cmd_str}
	disown ${!}
	unset _cmd_str
    else
        echo 'file ./target/*jar must exist'
    fi
}
alias jjr='_j_j_r'



function _jjrg {

    echo 'arg search, ${1}: '\'"${1}"\'
    
    JAR_LOG_FOLDER=${HOME}'/Desktop/log'
    echo 'jar log folder: '${JAR_LOG_FOLDER}

    if [ -e ./target/*jar ]
    then
        jarfile=$( command ls ./target/*.jar )
        _cmd_str='command grep --color=always -P -i '\'"${1}"\'' '${JAR_LOG_FOLDER}/$( basename $( command ls ./target/*jar ) )'.log'
        echo "${_cmd_str}"
        eval ${_cmd_str}
	__grc__=${?}
        unset _cmd_str
	echo 'grep exit code: '${__grc__}
    else
        echo 'file ./target/*jar must exist'
    fi
    return ${__grc__}
}
alias jjrg='_jjrg'
alias jjrgts='_jjrg '\''tomcat started'\'



function _j_l { 

    # all java processes
    jps -l

    
    # current dir java process
    if [ -e ./target/*jar ]
    then
        jarfile=$( basename $( ls ./target/*jar ) )
        if [ ! -z ${jarfile} ]
        then
            echo
            jps -l | grep --color=always ${jarfile}
        fi
    fi

    
    # arg ${1} java process
    if [ ! -z ${1} ]
    then 
        echo
        _s=$( jps -l | grep --color=always -P --color=always "${1}" )
        if [ ! -z "${_s}" ]
        then 
            echo "${_s}"
            else echo '"'${1}'": no results'
        fi
    fi
}

alias jl='_j_l'

function _t_k { 
    if [ -z ${1} ]
    then 
        if [ -e ./target/*jar ] ; then 
            jarfile=$( ls ./target/*.jar )
            _pid=$( jps -l | grep -P --color=never "${jarfile}" | awk '{ print $1 }' )
            echo ${_pid}
            jps -l | grep -P --color=always "${jarfile}"
            taskkill //f //pid "${_pid}"
        else 
            echo 'file ./target/*.jar must exist or PID must be provided'
        fi
    else 
        _n=$( echo ${1} | grep -P --color=never '^[0-9]+$' )
        if [ -z ${_n} ]
        then 
            _s=$( jps -l | grep --color=never "${1}" )
            echo "${_s}"; 
            _pid=$( echo "${_s}" | awk '{ print $1 }' )
        else 
            _pid=$( echo ${_n} )
        fi
        
        echo "${_pid}"
        taskkill //f //pid "${_pid}"
    fi
    unset _pid _s _n
} 

alias tk='_t_k'


s='--> Java Helper -- updated: ('${__ALIAS_LAST_UPDATE__}') \n'
s=${s}'(commands are better tuned to be executed from maven project root folder)\n'
s=${s}'  jl : jps -l \n'
s=${s}'  jj : java -jar \n'
s=${s}'  jjr: java -jar ./${jar_file} > ${log_file} \n'
s=${s}'\n'
s=${s}'  jjrg: grep -P -i ${1} ${log_file} \n'
s=${s}'  jjrgts: grep -P -i '\''tomcat started'\'' ${log_file} \n'
s=${s}'\n'
s=${s}'  mc:  mvn clean \n'
s=${s}'  mcp: mvn clean package -Dmaven.test.skip=true \n'
s=${s}'\n'
s=${s}'  tk : taskkill -- (mvn_folder_no_arg / pid / jps_name) \n'
_jh_s=${s}
unset s
alias jh='echo -e "${_jh_s}"'



# ------------------------------------------------------
# Git Aliases
# ------------------------------------------------------

alias gs='echo "--> git status"; sleep ${__ALIAS_TIMEOUT__}; git status'
alias gl='echo "--> git log --graph --all --decorate"; sleep ${__ALIAS_TIMEOUT__}; git log --graph --all --decorate'
alias glf='echo "--> git ls-files"; sleep ${__ALIAS_TIMEOUT__}; git ls-files'
alias gb='echo "--> git branch"; sleep ${__ALIAS_TIMEOUT__}; git branch'

alias gch='echo "--> git checkout"; sleep ${__ALIAS_TIMEOUT__}; git checkout'
function ga { echo '--> git add' "${@}" ; sleep ${__ALIAS_TIMEOUT__} ; git add "${@}" ; echo ; gs ; } 
alias gd='echo "--> git diff"; sleep ${__ALIAS_TIMEOUT__}; git diff'
alias gco='echo "--> git commit"; sleep ${__ALIAS_TIMEOUT__}; git commit' 

alias grh='echo "--> git reset --hard"; sleep ${__ALIAS_TIMEOUT__}; git reset --hard'
alias gm='echo "--> git merge"; sleep ${__ALIAS_TIMEOUT__}; git merge'

alias gf='echo "--> git fetch"; sleep ${__ALIAS_TIMEOUT__}; git fetch ; echo ; gs';
alias gpl='echo "--> git pull"; sleep ${__ALIAS_TIMEOUT__}; git pull'
alias gps='echo "--> git push"; sleep ${__ALIAS_TIMEOUT__}; git push'


s='--> Git Helper ('${__ALIAS_LAST_UPDATE__}') \n'
s=${s}'  gs : git status \n' 
s=${s}'  gl : git log --graph --all --decorate \n'
s=${s}'  glf: git ls-files \n'
s=${s}'  gb : git branch \n'
s=${s}'\n'
s=${s}'  gch: git checkout \n'
s=${s}'  ga : git add \n'
s=${s}'  gd : git diff \n'
s=${s}'  gco: git commit \n'
s=${s}'\n'
s=${s}'  grh: git reset --hard \n'
s=${s}'  gm : git merge \n'
s=${s}'\n'
s=${s}'  gf : git fetch \n'
s=${s}'  gpl: git pull \n'
s=${s}'  gps: git push \n'
_gh_s=${s}
unset s
alias gh='echo -e "${_gh_s}"'



# ------------------------------------------------------
# Specific Windows OS Aliases
# ------------------------------------------------------

uname | command grep -P -i '(mingw|window)' > /dev/null

__kernel_is_windows__=$( echo $? )

if [ ${__kernel_is_windows__} -eq '0'  ]; then
    alias wsl='clear ; winpty wsl'
    alias s='echo "--> start"; sleep ${__ALIAS_TIMEOUT__}; start'
    alias python='winpty python'
    alias ipython='winpty ipython'
    function _npp { notepad++ ${*} & disown ${!} ; }
    alias npp='_npp'
fi

unset __kernel_is_windows__



# ------------------------------------------------------
# Specific Linux OS Aliases
# ------------------------------------------------------

uname | command grep -P -i '(linux)' > /dev/null

__kernel_is_linux__=$( echo $? )

if [ ${__kernel_is_linux__} -eq '0'  ]; then
    alias xo='echo "--> xdg-open"; sleep ${__ALIAS_TIMEOUT__}; xdg-open'
fi

unset __kernel_is_linux__




